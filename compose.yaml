services:
  redis:
    container_name: redis
    profiles:
      - prod
      - dev
      - redis
    build: 
      context: .
      dockerfile: redis/Dockerfile
    env_file:
      - ./.env
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - 6379:6379
  #kafka:
    #container_name: kafka
    #image: bitnami/kafka:latest
    #environment:
      #- KAFKA_CFG_NODE_ID=0
      #- KAFKA_CFG_PROCESS_ROLES=controller,broker
      #- KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      #- KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      #- KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      #- KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      #- KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    #volumes:
    #- ../data/kafka:/bitnami/kafka
    #ports:
      #- 9092:9092
      #- 9094:9094
  # db:
  #   container_name: db
  #   profiles:
  #     - prod
  #     - dev
  #   build: 
  #     context: .
  #     dockerfile: postgres/Dockerfile
  #   env_file: 
  #     .env
  #   ports:
  #     - 5432:5432
  #   volumes:
  #     - ../data/postgres:/var/lib/postgresql/data
  # pgadmin4:
  #   container_name: pgadmin4
  #   profiles:
  #     - prod
  #     - dev
  #   build: 
  #     context: .
  #     dockerfile: pgadmin4/Dockerfile
  #   env_file: 
  #     .env
  #   ports:
  #     - 9001:80
  #   links: 
  #     - db:db
  db:
    container_name: db
    profiles:
      - prod
      - dev
    build: 
      context: .
      dockerfile: mariadb/Dockerfile
    env_file: 
      - ./.env
    ports:
      - 3306:3306
    volumes:
      - ../data/mysql:/var/lib/mysql
  phpmyadmin:
    container_name: phpmyadmin
    profiles:
      - prod
      - dev
    build: 
      context: .
      dockerfile: phpmyadmin/Dockerfile
    ports:
      - 9000:80
    env_file: 
      - ./.env
    links: 
      - db:db
  edb-mail-server:
    container_name: edb-mail-server
    profiles:
      - mailer
      - prod
      - dev
    build: 
      context: .
      dockerfile: edb-mail-server/Dockerfile
    env_file: 
       - ./.env
    volumes:
      - ../logs:/logs
  edb-server:
    container_name: edb-server
    profiles:
      - prod
      - dev
    build: 
      context: .
      dockerfile: edb-server/Dockerfile
    # https://vsupalov.com/docker-arg-env-variable-guide/
    env_file: 
      - ./.env
    ports:
      - 8080:8080
    volumes:
      - ../data:/data
      - ../logs:/logs
      - ./jwtRS256.key:/jwtRS256.key:ro
      - ./jwtRS256.key.pub:/jwtRS256.key.pub:ro
      - ./auth0.key.pub:/auth0.key.pub:ro
      - ./clerk.key.pem:/clerk.key.pem:ro
      - ./config:/config:ro
  nginx:
    container_name: nginx
    profiles:
      - prod
      - dev
    build: 
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - 80:80
      
  otel-collector:
    container_name: otel
    image: otel/opentelemetry-collector:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"     # OTLP gRPC receiver for traces
      - "8889:8889"     # Prometheus metrics exporter
      - "16686:16686"   # Jaeger UI
    restart: always

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ../data/prometheus:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - otel-collector

  grafana:
    container_name: grafana
    image: grafana/grafana-oss
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - ../data/grafana:/var/lib/grafana
